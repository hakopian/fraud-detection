version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_MESSAGE_MAX_BYTES: 1000012
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1000012
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--zookeeper", "zookeeper:2181", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3


  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: fraud_detection
    ports:
      - "3308:3306"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - default
    depends_on:
      - mongo
      - mysql


  producer:
    build: .
    command: ["python", "kafka_producer.py"]
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - default

  consumer:
    build: .
    command: ["python", "kafka_consumer.py"]
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - default

networks:
  default: